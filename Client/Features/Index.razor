@page "/"
@using DynamicDashboards.Shared
@using DynamicDashboards.Client.Backend
@inject WidgetLocator _widgetLocator
@inject IDashboardApi DashboardApi

<h2 class="text-2xl mb-2">Widgets</h2>

<div class="flex flex-row gap-8">
    <div class="p-4 border rounded">
        @foreach (var widget in availableWidgets)
        {
            <div class="text-lg flex justify-between w-52">
                <span>@widget.Name</span>
                <button class="underline" @onclick="@(() => AddWidget(widget.Type))">Add</button>
            </div>
        }
    </div>
    <div class="p-4 border rounded">
        <h3>Want more widgets?</h3>
        <p class="my-2">Here's how:</p>
        <ol class="list-inside list-decimal leading-relaxed">
            <li>Create a new Blazor component in the <strong>Features\Widgets</strong> folder</li>
            <li>Rebuild the app</li>
            <li>Marvel as the component appears in the list :)</li>
        </ol>
    </div>
</div>

<hr class="mt-6"/>
<h2 class="text-2xl my-4">Dashboard</h2>
<div class="flex flex-row flex-wrap gap-4">

    @if (resolvedComponents.Any())
    {
        @foreach (var component in resolvedComponents)
        {
            <div class="flex flex-col w-96">
                <div class="p-4 border rounded-md flex-1">
                    <DynamicComponent Type="component.ResolvedType"/>
                </div>
                <button class="mt-2 rounded-md p-2 bg-red-500 text-white" @onclick="@(() => RemoveWidget(component))">
                    Remove
                </button>
            </div>
        }
    }
    else
    {
        <p class="text-lg text-red-500">
            Nothing to see here! Try adding some widgets from the list above.
        </p>
    }


</div>

@code {

    private IEnumerable<ComponentModel> resolvedComponents = Enumerable.Empty<ComponentModel>();
    private IEnumerable<WidgetLocator.WidgetModel?> availableWidgets;
    private DashboardModel dashboard;

    protected override async Task OnInitializedAsync()
    {
        availableWidgets = _widgetLocator.FindAll();
        await ReloadBoard();
    }

    private async Task ReloadBoard()
    {
        dashboard = await DashboardApi.GetDashboards();
        resolvedComponents = dashboard.Panels
            .Select(x => new ComponentModel(x.Title, x.ComponentType, x.Id))
            .Where(x => x.ResolvedType != null);
    }

    private async Task AddWidget(string widgetType)
    {
        await DashboardApi.AddPanel(new AddPanelCommand
        {
            Title = "test",
            Type = widgetType
        });
        await ReloadBoard();
    }

    private async Task RemoveWidget(ComponentModel component)
    {
        await DashboardApi.DeletePanel(dashboard.Id, component.Id);
        await ReloadBoard();
    }

}